generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../generated-zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Medical_Accounts {
  id             String        @id @unique @default(cuid())
  blood_type     BloodType
  account_status AccountStatus
  is_activated   Boolean       @default(false)
  created_at     DateTime      @default(now())
  updated_at     DateTime?
  Donators       Donators[]
}

model Donators {
  id                  String                @id @unique @default(cuid())
  medical_account_id  String
  image_src           String?
  first_name          String
  last_name           String
  phone_number        String                @unique
  gender              Gender
  dob                 DateTime
  address             String
  email               String?               @unique
  password            String
  reward_point        Int                   @default(0)
  created_at          DateTime              @default(now())
  updated_at          DateTime?
  Medical_Account     Medical_Accounts      @relation(fields: [medical_account_id], references: [id])
  Redemption_History  Redemption_History[]
  Reservations        Reservations[]
  Reward_Transactions Reward_Transactions[]
  Session             Session[]
}

model Reward_Transactions {
  id         String    @id @unique @default(cuid())
  donator_id String
  points     Int
  created_at DateTime  @default(now())
  updated_at DateTime?
  Donator    Donators  @relation(fields: [donator_id], references: [id])
}

model Redemption_History {
  id            String           @id @unique @default(cuid())
  status        RedemptionStatus
  used_points   Int
  redeem_amount Int
  created_at    DateTime         @default(now())
  updated_at    DateTime?
  donator_id    String
  reward_id     String
  Donator       Donators         @relation(fields: [donator_id], references: [id])
  Reward        Rewards          @relation(fields: [reward_id], references: [id])
}

model Rewards {
  id                 String               @id @unique @default(cuid())
  name               String
  description        String
  required_points    Int
  image_src          String?
  is_available       Boolean?             @default(true)
  amount_left        Int
  created_at         DateTime             @default(now())
  updated_at         DateTime?
  deleted_at         DateTime?
  place_id           String
  Redemption_History Redemption_History[]
  Place              Places               @relation(fields: [place_id], references: [id])
}

model Places {
  id                   String                 @id @unique @default(cuid())
  name                 String
  description          String?
  image_src            String?
  icon_src             String?
  phone_number         String
  email                String?
  website_url          String?
  address              String
  opening_day          String
  opening_time         Float
  closing_time         Float
  is_available         Boolean                @default(true)
  created_at           DateTime               @default(now())
  updated_at           DateTime?
  deleted_at           DateTime?
  Announcements        Announcements[]
  Medical_Staff        Medical_Staff[]
  Place_Review_History Place_Review_History[]
  Reservation_Slots    Reservation_Slots[]
  Rewards              Rewards[]
  Special_Events       Special_Events[]
}

model Place_Review_History {
  id         String   @id @unique @default(cuid())
  rating     Int?
  created_at DateTime @default(now())
  place_id   String
  Place      Places   @relation(fields: [place_id], references: [id])
}

model Announcements {
  id         String     @id @unique @default(cuid())
  blood_type BloodType?
  post_type  PostType
  title      String
  content    String
  image_src  String?
  created_at DateTime
  updated_at DateTime?
  deleted_at DateTime?
  place_id   String
  Place      Places     @relation(fields: [place_id], references: [id])
}

model Special_Events {
  id          String    @id @unique @default(cuid())
  name        String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  deleted_at  DateTime?
  place_id    String
  img_src     String?
  Place       Places    @relation(fields: [place_id], references: [id])
}

model Reservation_Slots {
  id           String        @id @unique @default(cuid())
  reserve_date DateTime
  reserve_time DateTime
  created_at   DateTime      @default(now())
  updated_at   DateTime?
  cancelled_at DateTime?
  place_id     String
  Place        Places        @relation(fields: [place_id], references: [id])
  Reservations Reservations?
}

model Medical_Staff {
  id         String    @id @unique @default(cuid())
  first_name String
  last_name  String
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime?
  place_id   String
  Place      Places    @relation(fields: [place_id], references: [id])
  Session    Session[]
}

model Session {
  id               String         @id @unique @default(cuid())
  session_token    String         @unique @default(cuid())
  expires          DateTime?
  created_at       DateTime       @default(now())
  updated_at       DateTime?
  moderator_id     String?
  donator_id       String?
  medical_staff_id String?
  Donator          Donators?      @relation(fields: [donator_id], references: [id])
  Medical_Staff    Medical_Staff? @relation(fields: [medical_staff_id], references: [id])
  Moderator        Moderators?    @relation(fields: [moderator_id], references: [id])
}

model Reservations {
  id                     String                 @id @unique @default(cuid())
  status                 ReservationStatus
  created_at             DateTime               @default(now())
  cancelled_at           DateTime?
  updated_at             DateTime?
  reservation_slot_id    String                 @unique
  donator_id             String
  pre_donation_fb_id     String                 @unique
  Donation_History       Donation_History[]
  Donator                Donators               @relation(fields: [donator_id], references: [id])
  Pre_Donation_Feedbacks Pre_Donation_Feedbacks @relation(fields: [pre_donation_fb_id], references: [id])
  Reservation_Slot       Reservation_Slots      @relation(fields: [reservation_slot_id], references: [id])
}

model Pre_Donation_Feedbacks {
  id                   String                 @id @unique @default(cuid())
  created_at           DateTime               @default(now())
  Pre_Feedback_Answers Pre_Feedback_Answers[]
  Reservations         Reservations?
}

model Pre_Feedback_Answers {
  id                       String                  @id @unique @default(cuid())
  question_id              String
  choice_id                String
  pre_Donation_FeedbacksId String?
  Survey_Choice            Survey_Choices          @relation(fields: [choice_id], references: [id])
  Pre_Donation_Feedbacks   Pre_Donation_Feedbacks? @relation(fields: [pre_Donation_FeedbacksId], references: [id])
  Survey_Question          Survey_Questions        @relation(fields: [question_id], references: [id])
}

model Survey_Choices {
  id                    String                  @id @unique @default(cuid())
  order                 Int
  label                 String
  survey_question_id    String
  Post_Feedback_Answers Post_Feedback_Answers[]
  Pre_Feedback_Answers  Pre_Feedback_Answers[]
  Survey_Question       Survey_Questions        @relation(fields: [survey_question_id], references: [id])
}

model Survey_Questions {
  id                    String                  @id @unique @default(cuid())
  order                 Int
  type                  SurveyQuestionType
  title                 String
  description           String?
  is_required           Boolean
  Post_Feedback_Answers Post_Feedback_Answers[]
  Pre_Feedback_Answers  Pre_Feedback_Answers[]
  Survey_Choices        Survey_Choices[]
}

model Donation_History {
  id                     String                   @id @unique @default(cuid())
  rewarded_points        Int
  blood_quality_status   String?
  blood_type             BloodType
  status                 DonationStatus
  created_at             DateTime                 @default(now())
  updated_at             DateTime?
  deleted_at             DateTime?
  reservation_id         String
  post_donation_db_id    String?
  Post_Donation_Feedback Post_Donation_Feedbacks? @relation(fields: [post_donation_db_id], references: [id])
  Reservation            Reservations             @relation(fields: [reservation_id], references: [id])
}

model Post_Donation_Feedbacks {
  id                    String                  @id @unique @default(cuid())
  created_at            DateTime                @default(now())
  Donation_History      Donation_History[]
  Post_Feedback_Answers Post_Feedback_Answers[]
}

model Post_Feedback_Answers {
  id                    String                  @id @unique @default(cuid())
  feedback_id           String
  question_id           String
  choice_id             String
  Survey_Choice         Survey_Choices          @relation(fields: [choice_id], references: [id])
  Pre_Donation_Feedback Post_Donation_Feedbacks @relation(fields: [feedback_id], references: [id])
  Survey_Question       Survey_Questions        @relation(fields: [question_id], references: [id])
}

model Moderators {
  id           String    @id @unique @default(cuid())
  first_name   String
  last_name    String
  phone_number String
  email        String
  password     String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  Session      Session[]
}

enum BloodType {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum AccountStatus {
  VERIFIED
  UNVERIFIED
}

enum Gender {
  MALE
  FEMALE
}

enum RedemptionStatus {
  REDEEMED
  RECEIVED
  CANCELLED
}

enum PostType {
  NORMAL
  EMERGENCY
}

enum ReservationStatus {
  BOOKED
  COMPLETED
  CANCELLED
}

enum SurveyQuestionType {
  PRE_SURVEY
  POST_SURVEY
}

enum DonationStatus {
  WAIT_BLOOD_QUALITY
  SUCCESS
  FAILED
}
